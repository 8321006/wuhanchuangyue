<?xml version="1.0" encoding="UTF-8"?>

<!--
  - Application context definition for JPetStore's business layer.
  - Contains bean references to the transaction manager and to the DAOs in
  - dataAccessContext-local/jta.xml (see web.xml's "contextConfigLocation").
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring 
		http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.2.xsd
		">

	<context:annotation-config />

	<context:component-scan base-package="com.cy"/>
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
		
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init">
		<property name="url">
			<value>${url}</value>
		</property>
		<property name="username">
			<value>${username}</value>
		</property>
		<property name="password">
			<value>${password}</value>
		</property>
		
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="5" />
	    <property name="minIdle" value="5" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	
	   <property name="validationQuery" value="SELECT 'x'" />
       <property name="testWhileIdle" value="true" />
       <property name="testOnBorrow" value="false" />
       <property name="testOnReturn" value="false" />
       
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
       <property name="poolPreparedStatements" value="true" />
       <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	<!-- 创建SqlSessionFactory，同时指定数据源 -->
   <!--  <bean id="sqlMapClient" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="mappingLocations" value="classpath:com/hongyi/*/model/*.xml"/>
    </bean> -->
    
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath*:/com/cy/mapper/sql/*.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
    
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cy.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	 <!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
    <bean id="ibatisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
	<!-- 这些类的写操作需要事务 -->
	<tx:advice id="txAdvice"
		transaction-manager="ibatisTransactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="create*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="query*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="read*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="view*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="select*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="list*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="*Insert" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="*Update" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="synchronous*" read-only="false"
				propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.cy.service.*.*(..)) || execution(* com.cy.quartz.*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
	
</beans>
