<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cy.mapper.UniversityTransactionMapper">
	<!-- 实体类 - 数据库映射 2015-07-15 09:27:26. -->
	<resultMap id="BaseResultMap" type="com.cy.model.UniversityTransaction">
		<id column="id" property="id" jdbcType="CHAR" />
		<result column="transaction_type" property="transactionType" jdbcType="INTEGER" />
		<result column="transaction_state" property="transactionState" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="CHAR" />
		<result column="real_name" property="realName" jdbcType="CHAR" />
		<result column="transaction_reason" property="transactionReason" jdbcType="CHAR" />
		<result column="transaction_time" property="transactionTime" jdbcType="TIMESTAMP" />
		<result column="course_id" property="courseId" jdbcType="CHAR" />
		<result column="course_name" property="courseName" jdbcType="CHAR" />
		<result column="class_id" property="classId" jdbcType="CHAR" />
		<result column="class_name" property="className" jdbcType="CHAR" />
		<result column="teacher_id" property="teacherId" jdbcType="CHAR" />
		<result column="teacher_name" property="teacherName" jdbcType="CHAR" />
		<result column="university_id" property="universityId" jdbcType="CHAR" />
		<result column="university_name" property="universityName" jdbcType="CHAR" />
		<result column="paper_id" property="paperId" jdbcType="VARCHAR" />
		<result column="paper_name" property="paperName" jdbcType="VARCHAR" />
		<result column="user_type" property="userType" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		id,
		transaction_type,
		transaction_state,
		user_id,
		transaction_reason,
		transaction_time,
		course_id,
		class_id,
		teacher_id,
		university_id,
		paper_id
	</sql>
	<!-- 查询学生事务列表 -->
	<select id="selectAll" resultMap="BaseResultMap">
		select 
		c.user_id,
		c.real_name,
		c.user_type,
		b.course_id,
		c.university_id,
		tt.course_name,
		tu.university_name,
		a.transaction_reason,
        a.transaction_time,
		a.transaction_state,
		a.transaction_type ,
        a.class_id,
        b.class_name,
        t.paper_id,
        t.paper_name,
        (SELECT 
        real_name 
        from 
        t_user
        where user_id in
       (select teacher_id from t_university_transaction 
       where  t_university_transaction.user_id=#{userId}))as teacher_name
	  from t_university_transaction a left outer join t_user c on a.user_id=c.user_id 
	 left outer join t_course_class  b on  a.class_id =b.class_id 
	  left outer join t_university  tu on tu.university_id=a.university_id
	   LEFT JOIN   t_course tt ON tt.course_id=b.course_id
	   LEFT JOIN t_paper t on t.paper_id=a.paper_id
	 where a.user_id=#{userId}
	 
	</select>
	
	<select id="queryTransactionByPaperId" resultMap="BaseResultMap" parameterType="com.cy.model.UniversityTransaction">
		select
		<include refid="Base_Column_List" />
		from t_university_transaction
		where paper_id = #{paperId,jdbcType=VARCHAR}
		and user_id = #{userId,jdbcType=VARCHAR}
		and transaction_type = '1'
	</select>
	
	<!-- 插入 - 全字段保存-->
	<insert id="insert" parameterType="com.cy.model.UniversityTransaction">
		insert
		into t_university_transaction (id, transaction_type, transaction_state,
		user_id,transaction_reason,transaction_time,
		course_id,class_id,teacher_id,university_id,paper_id)
		values (#{id,jdbcType=VARCHAR},
		#{transactionType,jdbcType=INTEGER}, #{transactionState,jdbcType=INTEGER},
		#{userId,jdbcType=VARCHAR},
		#{transactionReason,jdbcType=VARCHAR}, #{transactionTime,jdbcType=TIMESTAMP}, #{courseId,jdbcType=VARCHAR},
		#{classId,jdbcType=VARCHAR},
		(SELECT teacher_id FROM t_course_class WHERE class_id = #{classId,jdbcType=VARCHAR} ), #{universityId,jdbcType=VARCHAR},
		#{paperId,jdbcType=VARCHAR})
	</insert>
	
	<!-- 按主键更新 - 仅更新给定实体类中非null的字段 -->
	<update id="updateByPrimaryKeySelective" parameterType="com.cy.model.Test">
		update t_university_transaction
		<set>
			<if test="transactionType != null">
				transaction_type = #{transactionType,jdbcType=INTEGER},
			</if>
			<if test="transactionState != null">
				transaction_state = #{transactionState,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				user_id =
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="transactionReason != null">
				transaction_reason = #{transactionReason,jdbcType=VARCHAR},
			</if>
			<if test="transactionTime != null">
				transaction_time =
				#{transactionTime,jdbcType=TIMESTAMP},
			</if>
			<if test="courseId != null">
				course_id =
				#{courseId,jdbcType=VARCHAR},
			</if>
			<if test="classId != null">
				class_id =
				#{classId,jdbcType=VARCHAR},
			</if>
			<if test="teacherId != null">
				teacher_id =
				#{teacherId,jdbcType=VARCHAR},
			</if>
			<if test="universityId != null">
				university_id =
				#{universityId,jdbcType=VARCHAR},
			</if>
			<if test="paperId != null">
				paper_id =
				#{paperId,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>
	<!-- 查询老师事务列表 -->
	<select id="findAllteacherTransactionList" resultMap="BaseResultMap">
	  select 
	   tt.transaction_type,
	   tt.id,
       tt.transaction_state,
       tt.transaction_reason,
       tt.transaction_time,
       tt.course_id,
       tt.class_id,
       tt.teacher_id,
       tt.paper_id,
       t.paper_name,
       tt.user_id,
       (SELECT real_name FROM t_user WHERE user_id=#{teacherId})as teacher_name,
	   tu.university_id,
       tu.real_name,
       b.class_name,
       tc.course_name,
       c.university_name
	   from t_university_transaction tt
       LEFT JOIN t_user tu on tt.user_id=tu.user_id
       LEFT JOIN  t_university  c on tt.university_id=c.university_id
       LEFT JOIN t_course_class  b on  tt.class_id =b.class_id
       LEFT JOIN   t_course tc ON tc.course_id=b.course_id
       LEFT JOIN t_paper t on t.paper_id=tt.paper_id
     where tt.teacher_id=#{teacherId}
	</select>
	<update id="updateByuserId" parameterType="com.cy.model.UniversityTransaction">
	 update t_university_transaction
     set transaction_state=#{transactionState} where user_id=#{userId}and teacher_id=#{teacherId}and id=#{id}
	</update>
	
	</mapper>